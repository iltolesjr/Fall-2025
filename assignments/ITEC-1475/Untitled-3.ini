
Used 3 references
Finalizing the script and Q&A...
Got it. I’ll give you one single file you can paste into your repo that includes:

a ready to run all in one Linux script with no placeholders
short questions and short answers in plain text
Debian and Rocky flows handled automatically in the script
NFS export uses a safe any client rule to avoid subnet placeholders
PowerShell steps at the end to archive old assignments and push
Paste everything below into a new file named:
assignments/ITEC-1475/week4_to_now_all_in_one.md

Then follow the “how to use” section inside.

week 4 to now all in one
how to use

copy the bash script block into a file named week4_to_now_all_in_one.sh on your linux vm
make it executable
run it and follow prompts
copy the short answers from the answers section into your turn in doc
on windows run the powershell block to archive old stuff and push
scripts

bash week4_to_now_all_in_one.sh


#!/usr/bin/env bash# all in one lab helper# handles debian ubuntu and rocky# no placeholders. prompts for values as neededset -euo pipefailis_cmd() { command -v "$1" >/dev/null 2>&1; }detect_os() {  if [ -r /etc/os-release ]; then    . /etc/os-release    case "${ID,,}" in      ubuntu|debian) echo "debian"; return;;      rocky|rhel|centos|almalinux) echo "rocky"; return;;    esac    case "${ID_LIKE:-}" in      *debian*) echo "debian"; return;;      *rhel*|*fedora*) echo "rocky"; return;;    esac  fi  echo "debian"}pause() { read -r -p "press enter to continue"; }print_header() {  echo  echo "=============================="  echo "$1"  echo "=============================="}ldap_setup_debian() {  print_header "ldap server setup debian"  sudo apt update  sudo apt install -y slapd ldap-utils  echo "we will run the reconfigure tool so you can set domain and admin password"  echo "follow the prompts on screen"  sudo dpkg-reconfigure slapd  echo  echo "now add a test user"  read -r -p "enter base dn for example dc=school,dc=edu: " BASE_DN  read -r -p "enter admin dn for example cn=admin,$BASE_DN: " ADMIN_DN  read -r -p "enter test user id default testuser: " TEST_UID  TEST_UID=${TEST_UID:-testuser}  read -r -p "enter test user common name default Test User: " TEST_CN  TEST_CN=${TEST_CN:-Test User}  read -r -s -p "enter test user password: " TEST_PW; echo  cat > /tmp/${TEST_UID}.ldif <<LDIFdn: uid=${TEST_UID},ou=people,${BASE_DN}objectClass: inetOrgPersonsn: ${TEST_CN}cn: ${TEST_CN}uid: ${TEST_UID}userPassword: ${TEST_PW}LDIF  sudo ldapadd -x -D "${ADMIN_DN}" -W -f "/tmp/${TEST_UID}.ldif" || {    echo "could not add user. check admin dn and password and base dn"; return 1; }  echo "verify"  ldapsearch -x -LLL -H ldap://localhost -b "${BASE_DN}" "(uid=${TEST_UID})" cn uid}ldap_setup_rocky() {  print_header "ldap server setup rocky"  sudo dnf install -y openldap-servers openldap-clients  sudo systemctl enable --now slapd  echo "if ldap is not yet configured you must set the admin dn and password first"  echo "this script will try to add a test user. if it fails with invalid credentials configure slapd then try again"  read -r -p "enter base dn for example dc=school,dc=edu: " BASE_DN  read -r -p "enter admin dn for example cn=admin,$BASE_DN: " ADMIN_DN  read -r -p "enter test user id default testuser: " TEST_UID  TEST_UID=${TEST_UID:-testuser}  read -r -p "enter test user common name default Test User: " TEST_CN  TEST_CN=${TEST_CN:-Test User}  read -r -s -p "enter test user password: " TEST_PW; echo  cat > /tmp/${TEST_UID}.ldif <<LDIFdn: uid=${TEST_UID},ou=people,${BASE_DN}objectClass: inetOrgPersonsn: ${TEST_CN}cn: ${TEST_CN}uid: ${TEST_UID}userPassword: ${TEST_PW}LDIF  sudo ldapadd -x -D "${ADMIN_DN}" -W -f "/tmp/${TEST_UID}.ldif" || {    echo "could not add user. set admin dn and password in slapd then try again"; return 1; }  echo "verify"  ldapsearch -x -LLL -H ldap://localhost -b "${BASE_DN}" "(uid=${TEST_UID})" cn uid}nfs_server_debian() {  print_header "nfs server debian"  sudo apt update  sudo apt install -y nfs-kernel-server  sudo mkdir -p /srv/nfs/shared  sudo chown nobody:nogroup /srv/nfs/shared  sudo chmod 0775 /srv/nfs/shared  echo "/srv/nfs/shared *(rw,sync,no_subtree_check,root_squash)" | sudo tee /etc/exports >/dev/null  sudo exportfs -a  sudo systemctl enable --now nfs-kernel-server  sudo exportfs -v}nfs_server_rocky() {  print_header "nfs server rocky"  sudo dnf install -y nfs-utils  sudo mkdir -p /srv/nfs/shared  sudo chown nfsnobody:nfsnobody /srv/nfs/shared  sudo chmod 0775 /srv/nfs/shared  echo "/srv/nfs/shared *(rw,sync,no_subtree_check,root_squash)" | sudo tee /etc/exports >/dev/null  sudo systemctl enable --now nfs-server  sudo exportfs -r  if is_cmd firewall-cmd; then    sudo firewall-cmd --add-service=nfs --permanent || true    sudo firewall-cmd --add-service=mountd --permanent || true    sudo firewall-cmd --add-service=rpc-bind --permanent || true    sudo firewall-cmd --reload || true  fi  if is_cmd setsebool; then    sudo setsebool -P nfs_export_all_rw 1 || true  fi  sudo exportfs -v}nfs_client_local_mount() {  print_header "nfs client local mount on same machine for quick test"  if grep -q "ID=ubuntu\|ID=debian" /etc/os-release 2>/dev/null; then    sudo apt update    sudo apt install -y nfs-common  else    sudo dnf install -y nfs-utils  fi  sudo mkdir -p /mnt/nfs_shared  sudo mount -t nfs localhost:/srv/nfs/shared /mnt/nfs_shared  sudo touch /mnt/nfs_shared/test_from_client.txt  ls -l /mnt/nfs_shared  echo "localhost:/srv/nfs/shared /mnt/nfs_shared nfs defaults 0 0" | sudo tee -a /etc/fstab >/dev/null}software_managers_debian() {  print_header "software managers debian"  sudo apt update  echo "apt search web server"  apt search "^apache2$" | head -n 5 || true  echo "snap basic"  sudo apt install -y snapd  snap --version || true  sudo snap install hello-world || true  hello-world || true  echo "flatpak basic"  sudo apt install -y flatpak  flatpak --version || true  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo || true  flatpak search text editor | head -n 10 || true  echo "docker basic"  sudo apt install -y docker.io || true  docker --version || true  sudo docker run --rm hello-world || true  echo "tarball demo"  mkdir -p ~/test-app  echo "application files" > ~/test-app/readme.txt  tar -czf ~/test-app.tar.gz -C ~ test-app  tar -tzf ~/test-app.tar.gz | head -n 5  echo "build tools"  sudo apt install -y build-essential}software_managers_rocky() {  print_header "software managers rocky"  sudo dnf makecache  echo "dnf search httpd"  dnf search httpd | head -n 10 || true  echo "flatpak basic"  sudo dnf install -y flatpak  flatpak --version || true  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo || true  flatpak search text editor | head -n 10 || true  echo "podman basic as docker alt"  sudo dnf install -y podman || true  podman --version || true  echo "tarball demo"  mkdir -p ~/test-app  echo "application files" > ~/test-app/readme.txt  tar -czf ~/test-app.tar.gz -C ~ test-app  tar -tzf ~/test-app.tar.gz | head -n 5  echo "build tools group"  sudo dnf groupinstall -y "Development Tools" || true}main_menu() {  OS=$(detect_os)  echo "detected os: $OS"  while true; do    echo    echo "pick a task"    echo "1 ldap server setup"    echo "2 nfs server setup"    echo "3 nfs client local mount test"    echo "4 software managers demo"    echo "5 quit"    read -r -p "enter number: " CH    case "$CH" in      1) [ "$OS" = "debian" ] && ldap_setup_debian || ldap_setup_rocky; pause;;      2) [ "$OS" = "debian" ] && nfs_server_debian || nfs_server_rocky; pause;;      3) nfs_client_local_mount; pause;;      4) [ "$OS" = "debian" ] && software_managers_debian || software_managers_rocky; pause;;      5) echo "done"; exit 0;;      *) echo "not a choice";;    esac  done}main_menu
windows powershell repo cleanup and push


# run from repo root in pwsh$dt = (Get-Date).ToString("yyyy_MM_dd")$archive = "assignments\archive_$dt"New-Item -ItemType Directory -Path $archive -Force | Out-Null# keep only exact names you want to keep$keep = @('ITEC-1475','ENGL-1110','NSF-STEM')Get-ChildItem assignments -Directory | Where-Object { $keep -notcontains $_.Name } | ForEach-Object {  git mv ("assignments\{0}" -f $_.Name) ("{0}\{1}" -f $archive,$_.Name)}git add -Agit commit -m "archive old assignments and add week4 to now all in one"git push origin HEAD
questions and answers short and simple

ldap
1 what is ldap
a central list of users and groups

2 how do you test ldap
use ldapsearch with base dn

3 how do you add a user
make an ldif then run ldapadd

4 how to secure ldap
use tls and strong admin password

nfs
1 what is nfs
it shares a folder over the network

2 how to export a folder
add a line to etc exports then run exportfs

3 how to mount on a client
use mount server colon path space mount point

4 why root squash
it makes remote root less powerful

software managers
1 what is apt
a tool to install and update software on debian and ubuntu

2 what is snap
apps that bundle what they need and auto update

3 what is flatpak
apps that run in a safe box and work on many linux

4 what is appimage
one file app that runs without install

5 why use docker or podman
same app runs the same on many machines

6 what to read in a tarball
readme or install file

7 why use a pre built binary
it is fast and easy

compare short
apt and dnf easy and safe but may be old
snap and flatpak easy and new but use more space
appimage very simple but no auto update
docker and podman very stable but more parts
tarball simple but manual work
source full control but slow and hard

notes

no placeholders used in the script
the script asks for values when needed
the nfs export allows any client so it runs without subnet edits
if rocky ldap add fails configure slapd first then run again
want me to save this into the repo and push now, or do you want to paste it yourself and run the steps?